// <auto-generated />
using System;
using DAL.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(EventDbContext))]
    partial class EventDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DAL.Models.DAL.Models.EventDetails", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EventId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<string>("EventCategory")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("EventCategory");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("EventDate");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("EventName");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Status");

                    b.HasKey("EventId");

                    b.ToTable("EventDetails");
                });

            modelBuilder.Entity("DAL.Models.DAL.Models.ParticipantEventDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("EventId");

                    b.Property<string>("IsAttended")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("IsAttended");

                    b.Property<string>("ParticipantEmailId")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ParticipantEmailId");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("ParticipantEmailId");

                    b.ToTable("ParticipantEventDetails");
                });

            modelBuilder.Entity("DAL.Models.DAL.Models.SessionInfo", b =>
                {
                    b.Property<int>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SessionId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SessionId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("EventId");

                    b.Property<DateTime>("SessionEnd")
                        .HasColumnType("datetime2")
                        .HasColumnName("SessionEnd");

                    b.Property<DateTime>("SessionStart")
                        .HasColumnType("datetime2")
                        .HasColumnName("SessionStart");

                    b.Property<string>("SessionTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SessionTitle");

                    b.Property<string>("SessionUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SessionUrl");

                    b.Property<int?>("SpeakerId")
                        .HasColumnType("int")
                        .HasColumnName("SpeakerId");

                    b.HasKey("SessionId");

                    b.HasIndex("EventId");

                    b.HasIndex("SpeakerId");

                    b.ToTable("SessionInfo");
                });

            modelBuilder.Entity("DAL.Models.DAL.Models.SpeakersDetails", b =>
                {
                    b.Property<int>("SpeakerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SpeakerId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpeakerId"));

                    b.Property<string>("SpeakerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SpeakerName");

                    b.HasKey("SpeakerId");

                    b.ToTable("SpeakersDetails");
                });

            modelBuilder.Entity("DAL.Models.DAL.Models.UserInfo", b =>
                {
                    b.Property<string>("EmailId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("EmailId");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Password");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Role");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("UserName");

                    b.HasKey("EmailId");

                    b.ToTable("UserInfo");
                });

            modelBuilder.Entity("DAL.Models.DAL.Models.ParticipantEventDetails", b =>
                {
                    b.HasOne("DAL.Models.DAL.Models.EventDetails", null)
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.DAL.Models.UserInfo", null)
                        .WithMany()
                        .HasForeignKey("ParticipantEmailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Models.DAL.Models.SessionInfo", b =>
                {
                    b.HasOne("DAL.Models.DAL.Models.EventDetails", null)
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.DAL.Models.SpeakersDetails", null)
                        .WithMany()
                        .HasForeignKey("SpeakerId")
                        .OnDelete(DeleteBehavior.SetNull);
                });
#pragma warning restore 612, 618
        }
    }
}
